   Compiling tokenizer v0.1.0 (/home/shoda/LabYouth/mnasm/tokenizer)
warning: field `macro_depth2` is never read
   --> tokenizer/src/tokenizer2.rs:128:5
    |
114 | pub struct Tokenizer2<'a> {
    |            ---------- field in this struct
...
128 |     macro_depth2: Cell<i64>,
    |     ^^^^^^^^^^^^
    |
    = note: `Tokenizer2` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis
    = note: `#[warn(dead_code)]` on by default

   Compiling data v0.1.0 (/home/shoda/LabYouth/mnasm/data)
   Compiling parser v0.1.0 (/home/shoda/LabYouth/mnasm/parser)
   Compiling analyzer v0.1.0 (/home/shoda/LabYouth/mnasm/analyzer)
warning: `tokenizer` (lib) generated 1 warning
   Compiling codegen v0.1.0 (/home/shoda/LabYouth/mnasm/codegen)
   Compiling mnasm v0.1.0 (/home/shoda/LabYouth/mnasm)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1.04s
     Running `target/debug/mnasm test/t12.s -e`
(
    "for",
    [
        Stream {
            begin: test/t12.s:67:10,
            end: test/t12.s:67:22,
        },
        Stream {
            begin: test/t12.s:67:24,
            end: test/t12.s:67:39,
        },
        Stream {
            begin: test/t12.s:67:41,
            end: test/t12.s:67:54,
        },
        Stream {
            begin: test/t12.s:67:56,
            end: test/t12.s:78:6,
        },
    ],
)
we have :{"cond": Macro { name: "cond", args: [], stream: Stream { begin: test/t12.s:67:24, end: test/t12.s:67:39 } }, "loop": Macro { name: "loop", args: [], stream: Stream { begin: test/t12.s:67:56, end: test/t12.s:78:6 } }, "inc": Macro { name: "inc", args: [], stream: Stream { begin: test/t12.s:67:41, end: test/t12.s:67:54 } }, "init": Macro { name: "init", args: [], stream: Stream { begin: test/t12.s:67:10, end: test/t12.s:67:22 } }}
we have :{"ins": Macro { name: "ins", args: [], stream: Stream { begin: builtin:1:1, end: builtin:0:0 } }, "lhs": Macro { name: "lhs", args: [], stream: Stream { begin: test/t12.s:67:12, end: test/t12.s:67:19 } }, "rhs": Macro { name: "rhs", args: [], stream: Stream { begin: test/t12.s:67:20, end: test/t12.s:67:21 } }}
we have :{"rhs": Macro { name: "rhs", args: [], stream: Stream { begin: test/t12.s:67:20, end: test/t12.s:67:21 } }, "lhs": Macro { name: "lhs", args: [], stream: Stream { begin: test/t12.s:67:12, end: test/t12.s:67:19 } }, "ins": Macro { name: "ins", args: [], stream: Stream { begin: builtin:1:1, end: builtin:0:0 } }}
we have :{"ins": Macro { name: "ins", args: [], stream: Stream { begin: builtin:1:1, end: builtin:0:0 } }, "lhs": Macro { name: "lhs", args: [], stream: Stream { begin: test/t12.s:67:12, end: test/t12.s:67:19 } }, "rhs": Macro { name: "rhs", args: [], stream: Stream { begin: test/t12.s:67:20, end: test/t12.s:67:21 } }}
we have :{"inc": Macro { name: "inc", args: [], stream: Stream { begin: test/t12.s:67:41, end: test/t12.s:67:54 } }, "cond": Macro { name: "cond", args: [], stream: Stream { begin: test/t12.s:67:24, end: test/t12.s:67:39 } }, "init": Macro { name: "init", args: [], stream: Stream { begin: test/t12.s:67:10, end: test/t12.s:67:22 } }, "loop": Macro { name: "loop", args: [], stream: Stream { begin: test/t12.s:67:56, end: test/t12.s:78:6 } }}
(
    "l",
    [
        Stream {
            begin: test/t12.s:67:27,
            end: test/t12.s:67:34,
        },
        Stream {
            begin: test/t12.s:67:36,
            end: test/t12.s:67:38,
        },
    ],
)
we have :{"lhs": Macro { name: "lhs", args: [], stream: Stream { begin: test/t12.s:67:27, end: test/t12.s:67:34 } }, "rhs": Macro { name: "rhs", args: [], stream: Stream { begin: test/t12.s:67:36, end: test/t12.s:67:38 } }}
we have :{"lhs": Macro { name: "lhs", args: [], stream: Stream { begin: test/t12.s:67:27, end: test/t12.s:67:34 } }, "rhs": Macro { name: "rhs", args: [], stream: Stream { begin: test/t12.s:67:36, end: test/t12.s:67:38 } }}
we have :{"cond": Macro { name: "cond", args: [], stream: Stream { begin: test/t12.s:67:24, end: test/t12.s:67:39 } }, "init": Macro { name: "init", args: [], stream: Stream { begin: test/t12.s:67:10, end: test/t12.s:67:22 } }, "inc": Macro { name: "inc", args: [], stream: Stream { begin: test/t12.s:67:41, end: test/t12.s:67:54 } }, "loop": Macro { name: "loop", args: [], stream: Stream { begin: test/t12.s:67:56, end: test/t12.s:78:6 } }}
(
    "divide",
    [
        Stream {
            begin: test/t12.s:68:17,
            end: test/t12.s:68:24,
        },
        Stream {
            begin: test/t12.s:68:26,
            end: test/t12.s:68:27,
        },
    ],
)
(
    "divide1",
    [
        Stream {
            begin: test/t12.s:43:14,
            end: test/t12.s:43:16,
        },
        Stream {
            begin: test/t12.s:43:18,
            end: test/t12.s:43:20,
        },
    ],
)
we have :{"ins": Macro { name: "ins", args: [], stream: Stream { begin: builtin:1:1, end: builtin:0:0 } }, "lhs": Macro { name: "lhs", args: [], stream: Stream { begin: test/t12.s:36:7, end: test/t12.s:36:11 } }, "rhs": Macro { name: "rhs", args: [], stream: Stream { begin: test/t12.s:36:13, end: test/t12.s:36:15 } }}
we have :{"lhs": Macro { name: "lhs", args: [], stream: Stream { begin: test/t12.s:36:7, end: test/t12.s:36:11 } }, "ins": Macro { name: "ins", args: [], stream: Stream { begin: builtin:1:1, end: builtin:0:0 } }, "rhs": Macro { name: "rhs", args: [], stream: Stream { begin: test/t12.s:36:13, end: test/t12.s:36:15 } }}
we have :{"ins": Macro { name: "ins", args: [], stream: Stream { begin: builtin:1:1, end: builtin:0:0 } }, "lhs": Macro { name: "lhs", args: [], stream: Stream { begin: test/t12.s:36:7, end: test/t12.s:36:11 } }, "rhs": Macro { name: "rhs", args: [], stream: Stream { begin: test/t12.s:36:13, end: test/t12.s:36:15 } }}
we have :{}
[ERROR]: undefined argment:a
-> test/t12.s:36:15
